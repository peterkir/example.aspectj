// Available to customize the build
tasks.named('wrapper') {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}

subprojects { p ->
  def parsedProjectXml = new XmlSlurper().parse(file('.project'))
  def isBndProject = parsedProjectXml.buildSpec.buildCommand.find { cmd ->
      cmd.name.text() == 'bndtools.core.bndbuilder'
  }.size() > 0
  def isAspectjProject = parsedProjectXml.buildSpec.buildCommand.find { cmd ->
      cmd.name.text() == 'org.eclipse.ajdt.core.ajbuilder'
  }.size() > 0

  if (isBndProject) {
    println("bnd " + p)

    repositories   { mavenCentral() }
    configurations { ecj }
    dependencies   { ecj 'org.eclipse.jdt.core.compiler:ecj:4.6.1'}

    compileJava {
      Properties jdtSettings = new Properties()
      jdtSettings.load(p.file(".settings/org.eclipse.jdt.core.prefs").newDataInputStream())
      def srcLevel    = jdtSettings.getProperty('org.eclipse.jdt.core.compiler.source')
      def targetLevel = jdtSettings.getProperty('org.eclipse.jdt.core.compiler.codegen.targetPlatform')

      doFirst {
        options.encoding = 'utf-8'
        options.forkOptions.with {
          executable = 'java'
          jvmArgs = [
			'-cp', 
			project.configurations.ecj.asPath, 
			'org.eclipse.jdt.internal.compiler.batch.Main'
		  ]
        }
        if (sourceSets.inject(0) { result, i -> return (result + i.allSource.findAll{true}.size()) } == 0) {
          println ("${project.name} creating empty bin folder in order satisfy jar task")
          mkdir (file('bin'))
        }
        if (isAspectjProject) {
          println("AspectJ " + p)
          repositories   { mavenCentral() }
          configurations { ajc }
          dependencies   { ajc 'org.aspectj:aspectjtools:1.9.4' }
          sourceSets { // this is necessary to exclude aj source files from the jar
            main {
              resources { 
                exclude '**/*.aj' 
              }
            }
          }
		  ant.taskdef( 
		    resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", 
			classpath: configurations.ajc.asPath
		  )
          ant.iajc(
            source:    project.sourceCompatibility, 
            target:    project.targetCompatibility, 
            destDir:   destinationDir, 
            fork:      "false",
            classpath: configurations.compile.asPath) 
          {
              sourceroots {
                sourceSets.main.java.srcDirs.each{
                  pathelement(location:it.absolutePath)
                }
              }
              include( name:'**/*.aj' )
              exclude( name:'**/*.java' )
          }
        }
      }
    }
  }
}
